from flask import Flask, render_template, request, redirect, session, url_for
import sqlite3
import os
import pandas as pd

app = Flask(__name__)
app.secret_key = "supersecreto"

# Rutas de archivos
BASE_DIR = os.path.abspath(os.path.dirname(__file__))
DB_PATH = os.path.join(BASE_DIR, 'database.db')

# 游늷 Preguntas de la encuesta
preguntas = [
    {"texto": "Tengo fama de decir lo que pienso claramente y sin rodeos.", "estilo": "Pragm치tico"},
    {"texto": "Estoy seguro/a de lo que es bueno y malo, lo que est치 bien y lo que est치 mal.", "estilo": "Te칩rico"},
    {"texto": "Muchas veces act칰o sin mirar las consecuencias.", "estilo": "Activo"},
    {"texto": "Normalmente trato de resolver los problemas met칩dicamente y paso a paso.", "estilo": "Te칩rico"},
    {"texto": "Creo que los formalismos coartan y limitan la actuaci칩n libre de las personas.", "estilo": "Activo"},
]

# 游늷 Verificar si la base de datos existe y crearla si no
def verificar_base_datos():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS usuarios (
        id_usuario INTEGER PRIMARY KEY AUTOINCREMENT,
        email TEXT UNIQUE NOT NULL,
        contrase침a TEXT NOT NULL,
        nombre TEXT NOT NULL,
        apellido TEXT NOT NULL,
        matematicas INTEGER,
        historia INTEGER,
        fisica INTEGER,
        quimica INTEGER,
        biologia INTEGER,
        ingles INTEGER,
        geografia INTEGER
    )
    """)
    conn.commit()
    conn.close()

verificar_base_datos()

# 游늷 Clase para calcular rendimiento
class CalculoDeRendimiento:
    @staticmethod
    def obtener_rendimiento(nombre, apellido):
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("""
            SELECT matematicas, historia, fisica, quimica, biologia, ingles, geografia 
            FROM usuarios WHERE nombre = ? AND apellido = ?
        """, (nombre, apellido))
        estudiante_data = cursor.fetchone()
        conn.close()

        if estudiante_data:
            calificaciones = list(estudiante_data)
            promedio = sum(calificaciones) / len(calificaciones)
            return pd.cut([promedio], bins=[0, 70, 80, 90, 100], labels=['Bajo', 'B치sico', 'Alto', 'Superior'])[0]
        else:
            return "No hay datos"

# 游늷 Ruta principal (Redirige al registro si no ha iniciado sesi칩n)
@app.route('/')
def home():
    return render_template("bienvenida.html"))  

# 游늷 Ruta de registro de estudiante
@app.route("/registro", methods=["GET", "POST"])
def registro():
    if request.method == "POST":
        email = request.form.get("email").strip().lower()
        contrase침a = request.form.get("contrase침a").strip()
        nombre = request.form.get("nombre").strip().title()
        apellido = request.form.get("apellido").strip().title()

        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM usuarios WHERE email = ?", (email,))
        usuario_existente = cursor.fetchone()

        if usuario_existente:
            conn.close()
            return render_template("registro.html", error="丘멆잺 Este email ya est치 registrado. Intenta iniciar sesi칩n.")

        cursor.execute("INSERT INTO usuarios (email, contrase침a, nombre, apellido) VALUES (?, ?, ?, ?)", 
                       (email, contrase침a, nombre, apellido))
        conn.commit()
        conn.close()

        return redirect(url_for("login"))

    return render_template("registro.html")

# 游늷 Ruta de login
@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        email = request.form["email"].strip().lower()
        contrase침a = request.form["contrase침a"]

        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT id_usuario, nombre, apellido FROM usuarios WHERE email = ? AND contrase침a = ?", (email, contrase침a))
        usuario = cursor.fetchone()
        conn.close()

        if usuario:
            session["usuario_id"] = usuario[0]
            session["nombre"] = usuario[1]
            session["apellido"] = usuario[2]
            session["email"] = email  
            return redirect(url_for("dashboard"))  # 游댳 Lo redirigimos a una nueva p치gina de bienvenida
        else:
            return render_template("login.html", error="丘멆잺 Email o contrase침a incorrectos")

    return render_template("login.html")

# 游늷 Ruta de la encuesta (Despu칠s del login)
@app.route('/encuesta', methods=['GET', 'POST'])
def encuesta():
    if "usuario_id" not in session:
        return redirect(url_for("login"))  # 游댮 Redirige a login si no ha iniciado sesi칩n

    if request.method == "POST":
        return redirect(url_for("resultado"))

    return render_template("encuesta.html", preguntas=preguntas)  

# 游늷 Ruta de resultados de la encuesta
@app.route('/resultado', methods=['POST'])
def resultado():
    if "usuario_id" not in session:
        return redirect(url_for("login"))  

    nombre = session["nombre"]
    apellido = session["apellido"]

    respuestas = {f'pregunta{i}': request.form.get(f'pregunta{i}') for i in range(len(preguntas))}
    
    if None in respuestas.values():
        return render_template("encuesta.html", preguntas=preguntas, error="丘멆잺 Debes responder todas las preguntas.")

    estilos = {"Activo": 0, "Reflexivo": 0, "Te칩rico": 0, "Pragm치tico": 0}

    for i in range(len(preguntas)):  
        respuesta = respuestas.get(f'pregunta{i}')
        if respuesta == '+':
            estilos[preguntas[i]['estilo']] += 1  

    estilo_predominante = max(estilos, key=estilos.get)

    # 游늷 Obtener rendimiento acad칠mico desde la base de datos
    rendimiento = CalculoDeRendimiento.obtener_rendimiento(nombre, apellido)

    return render_template('resultado.html', nombre=nombre, apellido=apellido, 
                           estilo=estilo_predominante, rendimiento=rendimiento)

# 游늷 Ruta para cerrar sesi칩n
@app.route("/logout")
def logout():
    session.clear()
    return redirect(url_for("login"))

if __name__ == '__main__':
    app.run(debug=True)
